using Microsoft.AspNetCore.Http;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;

namespace DistSysACW.Middleware
{
    public class AuthMiddleware
    {
        private readonly RequestDelegate _next;

        public AuthMiddleware(RequestDelegate next)
        {
            _next = next;
        }

        public async Task InvokeAsync(HttpContext context, Models.UserContext dbContext)
        {
            try
            {
                context.Request.Headers.TryGetValue("ApiKey", out var value);
                if (value.Count > 0)
                {
                    var user = Models.UserDatabaseAccess.Authorization(value);
                    Claim[] claims =
                    {
                        new Claim(ClaimTypes.Name, user.UserName),
                        new Claim(ClaimTypes.Role, user.Role)
                    };
                    var ClaimIdentity = new ClaimsIdentity(claims, "New Claims");
                    context.User.AddIdentity(ClaimIdentity);
                }
            }
            catch
            {

            }

            // TODO:  Find if a header ‘ApiKey’ exists, and if it does, check the database to determine if the given API Key is valid
            //        Then set the correct roles for the User, using claims


            // Call the next delegate/middleware in the pipeline
            await _next(context);
        }

    }
}
