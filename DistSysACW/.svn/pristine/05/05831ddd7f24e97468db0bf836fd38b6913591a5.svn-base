using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace DistSysACWClient
{
    #region Task 10 and beyond

    class Client
    {
        public class User
        {
            public string ApiKey { get; set; }
            public string UserName { get; set; }
            public string Role { get; set; }

        }

        public const string DomainName = "https://localhost:44307/";
        //public const string DomainName = "http://distsysacw.azurewebsites.net/4435579/";

        static HttpClient client = new HttpClient();

        static User user = new User();

        public static string ServerPubKey = "";

        public static bool sortError = false;

        static void Main(string[] args)
        {
            PreRunner();
            Console.ReadKey();
        }

        public static void PreRunner()
        {
            int completeRequests = 0;
            while (true)
            {
                if (sortError == true && completeRequests == 0)
                {
                    Console.WriteLine("What would you like to do next?");
                }
                else if (completeRequests == 0)
                {
                    Console.WriteLine("Hello. What would you like to do?");
                }
                else
                {
                    Console.WriteLine("What would you like to do next?");
                }

                sortError = false;
                string userInput = Console.ReadLine();
                Console.Clear();
                string requestString = "";
                switch (userInput)
                {
                    case "TalkBack Hello":
                        requestString = "api/talkback/hello";
                        RunAsync(requestString, "Get", completeRequests, "", null).Wait();
                        break;

                    case string a when a.Contains("TalkBack Sort"):
                        try
                        {
                            
                            string numbersToSplit = userInput.Split('[', ']')[1];
                            string[] numbers = numbersToSplit.Split(',');
                            string appendString = null;
                            for (int i = 0; i < numbers.Count(); i++)
                            {
                                if (i == numbers.Count() - 1)
                                {
                                    appendString += "integers=" + numbers[i];
                                }
                                else
                                {
                                    appendString += "integers=" + numbers[i] + "&";
                                }
                            }
                            requestString = ("api/talkback/sort?" + appendString);
                            RunAsync(requestString, "Get", completeRequests, "", null).Wait();
                            break;
                        }
                        catch
                        {
                            sortError = true;
                            break;
                        }

                    case string a when a.Contains("User Get"):
                        string getSplit = userInput.Split(' ')[2];
                        requestString = ("api/user/new?username=" + getSplit);
                        RunAsync(requestString, "Get", completeRequests, "", null).Wait();
                        break;

                    case string a when a.Contains("User Post"):
                        string postSplit = userInput.Split(' ')[2];
                        requestString = ("api/user/new");
                        RunAsync(requestString, "Post", completeRequests, postSplit, null).Wait();
                        break;

                    case string a when a.Contains("User Set"):
                        string[] setSplit = userInput.Split(' ');
                        SetString(setSplit);
                        break;

                    case string a when a.Contains("User Delete"):
                        if (user.UserName == null || user.ApiKey == null)
                        {
                            Console.WriteLine("You need to do a User Post or User Set first.");
                            break;
                        }
                        else
                        {
                            requestString = "api/user/removeuser?username=" + user.UserName;
                            RunAsync(requestString, "Delete", completeRequests, "", null).Wait();
                            break;
                        }

                    case string a when a.Contains("User Role"):
                        //split input to get username and role
                        string[] roleSplit = userInput.Split(' ');
                        requestString = "api/user/changerole";
                        RunAsync(requestString, "BodyGet", completeRequests, "", roleSplit).Wait();
                        break;

                    case "Protected Hello":
                        requestString = "api/protected/hello";
                        RunAsync(requestString, "ProtHello", completeRequests, "", null).Wait();
                        break;

                    case string a when a.Contains("Protected SHA1"):
                        requestString = "api/protected/sha1?message=" + userInput;
                        RunAsync(requestString, "SHA1", completeRequests, "", null).Wait();
                        break;

                    case string a when a.Contains("Protected SHA256"):
                        requestString = "api/protected/sha256?message="+ userInput;
                        RunAsync(requestString, "SHA256", completeRequests, "", null).Wait();
                        break;

                    case string a when a.Contains("Get PublicKey"):
                        requestString = "api/protected/getpublickey";
                        RunAsync(requestString, "GetPub", completeRequests, "", null).Wait();
                        break;

                    case string a when a.Contains("Protected Sign"):
                        string[] messageContent = userInput.Split(' ');
                        requestString = "api/protected/sign?message=" + messageContent[2];
                        RunAsync(requestString, "ProtSign", completeRequests, messageContent[2], null).Wait();
                        break;

                    case "Exit":
                        break;

                    default:
                        Console.WriteLine("Please enter a valid command");
                        continue;
                }
                if (userInput == "Exit")
                {
                    break;
                }
                else
                {
                    if (userInput.Contains("User Set"))
                    {
                        continue;
                    }
                    else
                    {
                        if (sortError == false)
                        {
                            completeRequests += 1;
                            continue;
                        }
                        else
                        {
                            Console.WriteLine("Please enter a valid command.");
                            continue;
                        }
                        
                    }
                }
            }
        }

        static async Task RunAsync(string requestString, string requestType, int requests, string content, string[] multicontent)
        {

            Console.WriteLine("...please wait...");
            if (requests == 0)
            {
                client.BaseAddress = new Uri(DomainName);
            }
            try
            {
                //Can only handle requests with content in URI
                if (requestType == "Get")
                {
                    Task<string> task = GetStringAsync(requestString);
                    if (await Task.WhenAny(task, Task.Delay(20000)) == task) { Console.WriteLine(task.Result); }
                    else { Console.WriteLine("Request Timed Out"); }
                }
                else if (requestType == "Post")
                {
                    Task<string> task = CreateStringAsync(requestString, content, user);
                    if (await Task.WhenAny(task, Task.Delay(20000)) == task) { Console.WriteLine(task.Result); }
                    else { Console.WriteLine("Request Timed Out"); }
                }
                else if (requestType == "Delete")
                {
                    requests = 0;
                    Task<bool> task = DeleteAsync(requestString);
                    if (await Task.WhenAny(task, Task.Delay(20000)) == task) { Console.WriteLine(task.Result); }
                    else { Console.WriteLine("Request Timed Out"); }
                }
                //Made to handle User Role request which uses body content
                else if (requestType == "BodyGet")
                {
                    requests = 0;
                    Task<string> task = RoleAsync(requestString, multicontent);
                    if (await Task.WhenAny(task, Task.Delay(20000)) == task) { Console.WriteLine(task.Result); }
                    else { Console.WriteLine("Request Timed Out"); }
                }
                else if (requestType == "ProtHello")
                {
                    requests = 0;
                    Task<string> task = ProtHelloAsync(requestString);
                    if (await Task.WhenAny(task, Task.Delay(20000)) == task) { Console.WriteLine(task.Result); }
                    else { Console.WriteLine("Request Timed Out"); }
                }
                else if (requestType == "SHA1")
                {
                    requests = 0;
                    Task<string> task = SHA1Async(requestString);
                    if (await Task.WhenAny(task, Task.Delay(20000)) == task) { Console.WriteLine(task.Result); }
                    else { Console.WriteLine("Request Timed Out"); }
                }
                else if (requestType == "SHA256")
                {
                    requests = 0;
                    Task<string> task = SHA256Async(requestString);
                    if (await Task.WhenAny(task, Task.Delay(20000)) == task) { Console.WriteLine(task.Result); }
                    else { Console.WriteLine("Request Timed Out"); }
                }
                else if (requestType == "GetPub")
                {
                    requests = 0;
                    Task<string> task = GetPublicKey(requestString);
                    if (await Task.WhenAny(task, Task.Delay(20000)) == task) { Console.WriteLine(task.Result); }
                    else { Console.WriteLine("Request Timed Out"); }
                }
                else if (requestType == "ProtSign")
                {
                    requests = 0;
                    Task<string> task = ProtectedSign(requestString,content);
                    if (await Task.WhenAny(task, Task.Delay(20000)) == task) { Console.WriteLine(task.Result); }
                    else { Console.WriteLine("Request Timed Out"); }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.GetBaseException().Message);
            }
        }

        static async Task<string> GetStringAsync(string path)
        {
            string responsestring = "";
            HttpResponseMessage response = await client.GetAsync(path);
            responsestring = await response.Content.ReadAsStringAsync();
            return responsestring;
        }
        static async Task<string> CreateStringAsync(string path, string content, User user)
        {
            //Body Content
            HttpContent contentr = new StringContent("\"" + content + "\"", Encoding.UTF8, "application/json");
            var request = client.PostAsync(path, contentr);
            HttpResponseMessage response = await request;
            string responseBody = await response.Content.ReadAsStringAsync();

            if (response.StatusCode.Equals(HttpStatusCode.OK))
            {
                //set user stuff
                user.ApiKey = responseBody;
                user.UserName = content;
                return ("GOT API KEY");
            }
            else
            {
                return (responseBody);
            }
        }
        static void SetString(string[] content)
        {
            try
            {
                user.ApiKey = content[3];
                user.UserName = content[2];
                Console.WriteLine("Stored");
            }
            catch
            {
                Console.WriteLine("Please enter a valid command.");
            }
            
        }
        static async Task<bool> DeleteAsync(string path)
        {
            var request = new HttpRequestMessage()
            {
                RequestUri = new Uri(DomainName + path),
                Method = HttpMethod.Delete,
            };
            client.DefaultRequestHeaders.Clear();
            string apikey = user.ApiKey;
            client.DefaultRequestHeaders.Add("ApiKey", apikey);
            //request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("ApiKey"));
            HttpResponseMessage response = await client.SendAsync(request);
            
            if (response.StatusCode.Equals(HttpStatusCode.OK))
            {
                //set user stuff
                return true;
            }
            else
            {
                return false;
            }
        }
        static async Task<string> RoleAsync(string path, string[] content)
        {
            if (content.Length < 4)
            {
                return ("NOT DONE: Invalid request");
            }
            else
            {
                string nameEdit = ("'" + content[2] + "'");
                string roleEdit = ("'" + content[3] + "'");

                HttpContent contentr = new StringContent("{" + "'username'" + ":" + nameEdit + "," + "'role'" + ":" + roleEdit + "}", Encoding.UTF8, "application/json");

                var request = new HttpRequestMessage()
                {
                    RequestUri = new Uri(DomainName + path),
                    Content = contentr,
                    Method = HttpMethod.Post,
                };

                if (user.ApiKey == null)
                {
                    return ("You need to do a User Post or User Set first");
                }
                else
                {
                    //Set Header
                    client.DefaultRequestHeaders.Clear();
                    string apikey = user.ApiKey;
                    client.DefaultRequestHeaders.Add("ApiKey", apikey);

                    //HttpContent contentr = new StringContent("\"" + content + "\"", Encoding.UTF8, "application/json");
                    HttpResponseMessage response = await client.SendAsync(request);
                    string responseBody = await response.Content.ReadAsStringAsync();
                    return (responseBody);
                }
            }
        }
        static async Task<string> ProtHelloAsync(string path)
        {
            if (user.ApiKey == null)
            {
                return ("You need to do a User Post or User Set first");
            }
            else
            {
                var request = new HttpRequestMessage()
                {
                    RequestUri = new Uri(DomainName + path),
                    Method = HttpMethod.Get,
                };
                client.DefaultRequestHeaders.Clear();
                string apikey = user.ApiKey;
                client.DefaultRequestHeaders.Add("ApiKey", apikey);
                
                HttpResponseMessage response = await client.SendAsync(request);
                string responseBody = await response.Content.ReadAsStringAsync();
                return (responseBody);
            }
        }
        static async Task<string> SHA1Async(string path)
        {
            if (user.ApiKey == null)
            {
                return ("You need to do a User Post or User Set first");
            }
            else
            {
                var request = new HttpRequestMessage()
                {
                    RequestUri = new Uri(DomainName + path),
                    Method = HttpMethod.Get,
                };
                client.DefaultRequestHeaders.Clear();
                string apikey = user.ApiKey;
                client.DefaultRequestHeaders.Add("ApiKey", apikey);

                HttpResponseMessage response = await client.SendAsync(request);
                string responseBody = await response.Content.ReadAsStringAsync();
                return (responseBody);
            }
        }
        static async Task<string> SHA256Async(string path)
        {
            if (user.ApiKey == null)
            {
                return ("You need to do a User Post or User Set first");
            }
            else
            {
                var request = new HttpRequestMessage()
                {
                    RequestUri = new Uri(DomainName + path),
                    Method = HttpMethod.Get,
                };
                client.DefaultRequestHeaders.Clear();
                string apikey = user.ApiKey;
                client.DefaultRequestHeaders.Add("ApiKey", apikey);

                HttpResponseMessage response = await client.SendAsync(request);
                string responseBody = await response.Content.ReadAsStringAsync();
                return (responseBody);
            }
        }
        static async Task<string> GetPublicKey(string path)
        {
            if (user.ApiKey == null)
            {
                return ("You need to do a User Post or User Set first");
            }
            else
            {
                var request = new HttpRequestMessage()
                {
                    RequestUri = new Uri(DomainName + path),
                    Method = HttpMethod.Get,
                };

                client.DefaultRequestHeaders.Clear();
                string apikey = user.ApiKey;
                client.DefaultRequestHeaders.Add("ApiKey", apikey);

                HttpResponseMessage response = await client.SendAsync(request);
                string responseBody = await response.Content.ReadAsStringAsync();
                if (responseBody != null)
                {
                    ServerPubKey = responseBody;
                    return ("Got Public Key");
                }
                else
                {
                    return ("Couldn't Get the Public Key");
                }
                
            }
        }
        static async Task<string> ProtectedSign(string path, string content)
        {
            if (ServerPubKey == null)
            {
                return("Client doesn't yet have the public key");
                
            }
            else
            {
                byte[] originalData = Encoding.ASCII.GetBytes(content);
                byte[] lExponent = { 1, 0, 1 };
                var request = new HttpRequestMessage()
                {
                    RequestUri = new Uri(DomainName + path),
                    Method = HttpMethod.Get,
                };

                client.DefaultRequestHeaders.Clear();
                string apikey = user.ApiKey;
                client.DefaultRequestHeaders.Add("ApiKey", apikey);

                HttpResponseMessage response = await client.SendAsync(request);
                string responseBody = await response.Content.ReadAsStringAsync();
                byte[] dataToVerify = Encoding.ASCII.GetBytes(responseBody);

                try
                {
                    RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider();
                    string[] numbers = ServerPubKey.Split('>','=','<');
                    RSAParameters RSAalgKeys = new RSAParameters();

                    foreach (string str in numbers)
                    {
                        try
                        {
                            if (str == "Modulus")
                            {
                                int i = Array.IndexOf(numbers, "Modulus") + 1;
                                byte[] Modulus = Encoding.ASCII.GetBytes(numbers[i]);
                                RSAalgKeys.Modulus = Modulus;
                            }
                            if (str == "Exponent")
                            {
                                int i = Array.IndexOf(numbers, "Exponent") + 1;
                                byte[] Exponent = Encoding.ASCII.GetBytes(numbers[i]);
                                RSAalgKeys.Exponent = Exponent;
                            }
                        }
                        catch
                        {
                            return "Message was not successfully signed";
                        }
                        
                    }

                    //RSAalg.FromXmlString(ServerPubKey);
                    
                    RSAalg.ImportParameters(RSAalgKeys);

                    bool valid = RSAalg.VerifyData(originalData, new SHA1CryptoServiceProvider(), dataToVerify);

                    if (valid == true)
                    {
                        return "Message was successfully signed";
                    }
                    else if (valid == false)
                    {
                        return "Message was not successfully signed";
                    }
                }
                catch
                {
                    return "Message was not successfully signed";
                }
            }
            return "Message was not successfully signed";
        }
    }
    #endregion
}
